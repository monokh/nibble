{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Explorer.svelte",
    "Wallet.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Wallet from './Wallet.svelte';\n\timport Explorer from './Explorer.svelte';\n\n\tlet rpc = 'http://localhost:1337';\n</script>\n\n<style>\n.container {\n\twidth: 1100px;\n\tmargin: 0 auto;\n\tdisplay: grid;\n\tgrid-template-columns: 33% 67%;\n\tgrid-template-rows: auto auto auto;\n\tgrid-template-areas:\n        \"header rpc\"\n        \"wallet explorer\";\n}\n\nh1 {\n\tcolor: #000000;\n\tgrid-area: header;\n}\n\n.rpc {\n\tgrid-area: rpc;\n\ttext-align: right;\n\talign-self: center;\n}\n</style>\n\n<div class=\"container\">\n\t<h1>NIBBLE</h1>\n\t<div class=\"rpc\">\n\t\tNode: <input name=\"rpc\" type=\"text\" bind:value={rpc} placeholder=\"Node address\" />\n\t</div>\n\t<Wallet bind:rpc={rpc} />\n\t<Explorer bind:rpc={rpc} />\n</div>\n",
    "<script>\n    import { fade, fly } from 'svelte/transition';\n\timport { flip } from 'svelte/animate';\n    import { call } from './jsonrpc'\n\n    export let rpc;\n    let mempool = [];\n    let blocks = [];\n    let selectedBlockNumber;\n    let selectedBlock;\n\n    async function updateData () {\n        mempool = await call(rpc, 'mempool', []);\n        const latest_block = await call(rpc, 'blockheight', [])\n        const current_block = blocks[blocks.length - 1]\n        if (latest_block === current_block) return;\n        if (blocks.length) {\n            const block_difference = latest_block - current_block;\n            const newBlocks = [];\n            for (let i = 0; i < block_difference; i++) {\n                const block = current_block + i + 1;\n                newBlocks.push(block);\n            }\n            blocks = [...blocks, ...newBlocks]\n        } else {\n            blocks = [latest_block]\n        }\n    }\n\n    async function selectBlock (block) {\n        selectedBlockNumber = block\n        selectedBlock = await call(rpc, 'getblock', [block])\n    }\n\n    (async function () {\n        await updateData()\n        setInterval(async () => {\n            await updateData()\n        }, 5000)\n    })();\n</script>\n\n<style>\n    .explorer {\n        padding: 0 20px 20px 20px;\n        margin-left: 20px;\n        border: 1px solid #b9b9b9;\n    }\n\n    .table {\n        width: 100%;\n        table-layout: fixed;\n        border-collapse: collapse;\n    }\n\n    .table thead, .table tr {\n        border-bottom: 1px solid #9e9e9e;\n    }\n\n    .table td {\n        padding-top: 10px;\n        padding-right: 10px;\n    }\n    \n    .table thead {\n        font-weight: bold;\n    }\n\n    .table thead td:nth-child(3) {\n        width: 100px;\n    }\n\n    .table td {\n        padding-bottom: 10px;\n    }\n\n    .table tr td {\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n\n    .table tr td:hover {\n        overflow: show;\n        text-overflow: initial;\n        overflow-wrap: break-word;\n    }\n\n    .blocks {\n        display: flex;\n        flex-direction: row;\n    }\n\n    .block-list {\n        align-items: center;\n        height: 400px;\n        overflow-y: scroll;\n        padding-right: 10px;\n    }\n\n    .block-list button {\n        display: block;\n        width: 100px;\n        padding: 10px 10px 8px;\n        margin-bottom: 10px;\n    }\n\n    .block-detail {\n        flex: 1;\n        padding-left: 20px;\n    }\n\n</style>\n\n<div class=\"explorer\">\n    <h2>Mempool</h2>\n    <div>\n        {#if mempool.length}\n        <table class=\"table\">\n            <thead>\n                <td>From</td>\n                <td>To</td>\n                <td>Value</td>\n            </thead>\n            {#each mempool as item}\n                <tr>\n                    <td>{item.transaction.from}</td>\n                    <td>{item.transaction.to}</td>\n                    <td>{item.transaction.amount}</td>\n                </tr>\n            {/each}\n        </table>\n        {:else}\n        Empty\n        {/if}\n    </div>\n    <hr />\n    <h2>Blocks</h2>\n    <div class=\"blocks\">\n        <div class=\"block-list\">\n            {#each blocks.slice().reverse() as block (block)}\n            <button on:click={selectBlock(block)} \n                class=\"{block === selectedBlockNumber ? 'selected' : ''}\"\n                animate:flip in:fade={{delay:500, duration: 1000}} out:fly={{x:100}}>\n                No. {block}\n            </button>\n            {/each}\n        </div>\n        {#if selectedBlock}\n        <div class=\"block-detail\">\n            <p>{selectedBlock.hash}</p>\n            <table class=\"txs table\">\n                <thead>\n                    <td>From</td>\n                    <td>To</td>\n                    <td>Value</td>\n                </thead>\n                {#each selectedBlock.transactions as item}\n                    <tr>\n                        <td>{item.transaction.from}</td>\n                        <td>{item.transaction.to}</td>\n                        <td>{item.transaction.amount}</td>\n                    </tr>\n                {/each}\n                </table>\n        </div>\n        {/if}\n    </div>\n</div>",
    "<script>\n    import { call } from './jsonrpc'\n\n    export let rpc;\n    let pubKey;\n    let balance;\n\n    let sendPubKey;\n    let sendAmount;\n\n    let balancePubKey;\n    let pubKeyBalance;\n\n    let randomPubKey;\n\n    function copyPubKey () {\n        navigator.clipboard.writeText(pubKey);\n    }\n\n    function copyRandomPubKey () {\n        navigator.clipboard.writeText(randomPubKey);\n    }\n\n    async function send () {\n        await call(rpc, 'send', [sendPubKey, sendAmount])\n        sendAmount = undefined;\n        sendPubKey = undefined;\n    }\n\n    async function generateRandomPubKey () {\n        randomPubKey = await call(rpc, 'newpubkey', [])\n    }\n\n    async function getBalance () {\n        pubKeyBalance = await call(rpc, 'getbalance', [balancePubKey])\n        console.log(pubKeyBalance)\n        balancePubKey = null\n    }\n\n    (async function () {\n        pubKey = await call(rpc, 'getpubkey', [])\n        balance = await call(rpc, 'getbalance', [pubKey])\n        generateRandomPubKey()\n        setInterval(async () => {\n            balance = await call(rpc, 'getbalance', [pubKey])\n        }, 5000)\n    })()\n</script>\n\n<style>\n    .wallet {\n        padding: 0 20px 20px 20px;\n        border: 1px solid #b9b9b9;\n    }\n\n    .grid {\n        display: grid;\n        grid-template-rows: auto auto;\n        grid-template-columns: auto 1fr;\n        grid-gap: 10px;\n        align-items: center;\n    }\n</style>\n\n<div class=\"wallet\">\n    <h2>Wallet</h2>\n    <div class=\"grid\">\n        <div>Balance:</div><div>{#await balance then balance}<strong>{balance} Nibble </strong>{/await}</div>\n        <div>Public Key:</div><div>{#await pubKey then pubKey}<input type=\"text\" style=\"width: 170px;\" value={pubKey} />{/await} <button on:click={copyPubKey}>Copy</button></div>\n    </div>\n    <hr />\n    <h2>Send</h2>\n    <div class=\"grid\">\n        <div>To: </div><div><input type=\"text\" placeholder=\"Receiver pubkey\" bind:value={sendPubKey} /></div>\n        <div>Amount:</div><div><input type=\"number\" placeholder=\"Enter amount to send\" bind:value={sendAmount} /> <button on:click={send}>Send</button></div>\n    </div>\n    <hr />\n    <h2>Random Public Key</h2>\n    <div>{#await randomPubKey then randomPubKey}<input type=\"text\" style=\"width: 170px;\" value={randomPubKey} />{/await} <button on:click={copyRandomPubKey}>Copy</button> <button on:click={generateRandomPubKey}>New</button></div>\n    <hr />\n    <h2>Get Balance</h2>\n    <div class=\"grid\">\n        <div>Public Key:</div><div><input type=\"text\" placeholder=\"pubkey\" bind:value={balancePubKey} /> <button on:click={getBalance}>Go</button></div>\n        <strong>{#if !isNaN(pubKeyBalance)}{pubKeyBalance} Nibble{/if}</strong>\n    </div>\n</div>"
  ],
  "names": [],
  "mappings": "AAQA,UAAU,cAAC,CAAC,AACX,KAAK,CAAE,MAAM,CACb,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,GAAG,CAAC,GAAG,CAC9B,kBAAkB,CAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAClC,mBAAmB,CACZ,YAAY;QACZ,iBAAiB,AACzB,CAAC,AAED,EAAE,cAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,MAAM,AAClB,CAAC,AAED,IAAI,cAAC,CAAC,AACL,SAAS,CAAE,GAAG,CACd,UAAU,CAAE,KAAK,CACjB,UAAU,CAAE,MAAM,AACnB,CAAC;ACeG,SAAS,8BAAC,CAAC,AACP,OAAO,CAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CACzB,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AAC7B,CAAC,AAED,MAAM,8BAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,YAAY,CAAE,KAAK,CACnB,eAAe,CAAE,QAAQ,AAC7B,CAAC,AAED,qBAAM,CAAC,oBAAK,CAAE,qBAAM,CAAC,EAAE,eAAC,CAAC,AACrB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AACpC,CAAC,AAED,qBAAM,CAAC,EAAE,eAAC,CAAC,AACP,WAAW,CAAE,IAAI,CACjB,aAAa,CAAE,IAAI,AACvB,CAAC,AAED,qBAAM,CAAC,KAAK,eAAC,CAAC,AACV,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,qBAAM,CAAC,KAAK,CAAC,iBAAE,WAAW,CAAC,CAAC,AAAC,CAAC,AAC1B,KAAK,CAAE,KAAK,AAChB,CAAC,AAED,qBAAM,CAAC,EAAE,eAAC,CAAC,AACP,cAAc,CAAE,IAAI,AACxB,CAAC,AAED,qBAAM,CAAC,EAAE,CAAC,EAAE,eAAC,CAAC,AACV,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,QAAQ,AAC3B,CAAC,AAED,qBAAM,CAAC,EAAE,CAAC,iBAAE,MAAM,AAAC,CAAC,AAChB,QAAQ,CAAE,IAAI,CACd,aAAa,CAAE,OAAO,CACtB,aAAa,CAAE,UAAU,AAC7B,CAAC,AAED,OAAO,8BAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,AACvB,CAAC,AAED,WAAW,8BAAC,CAAC,AACT,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,MAAM,CAClB,aAAa,CAAE,IAAI,AACvB,CAAC,AAED,0BAAW,CAAC,MAAM,eAAC,CAAC,AAChB,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CACtB,aAAa,CAAE,IAAI,AACvB,CAAC,AAED,aAAa,8BAAC,CAAC,AACX,IAAI,CAAE,CAAC,CACP,YAAY,CAAE,IAAI,AACtB,CAAC;AC3DD,OAAO,cAAC,CAAC,AACL,OAAO,CAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CACzB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AAC7B,CAAC,AAED,KAAK,cAAC,CAAC,AACH,OAAO,CAAE,IAAI,CACb,kBAAkB,CAAE,IAAI,CAAC,IAAI,CAC7B,qBAAqB,CAAE,IAAI,CAAC,GAAG,CAC/B,QAAQ,CAAE,IAAI,CACd,WAAW,CAAE,MAAM,AACvB,CAAC"
}